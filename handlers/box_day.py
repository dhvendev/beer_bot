from random import randint
from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, InlineKeyboardButton
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils import markdown as mk
from core.db_async import check_ban, box
from core.config import settings
from datetime import datetime


class CallbackBox(CallbackData, prefix='box_day'):
    text: str

PRIZES = {
    40: 5,    # 0-39: 5 –∫—Ä—ã—à–µ–∫ (40% —à–∞–Ω—Å)
    65: 10,   # 40-64: 10 –∫—Ä—ã—à–µ–∫ (25% —à–∞–Ω—Å)
    85: 20,   # 65-84: 20 –∫—Ä—ã—à–µ–∫ (20% —à–∞–Ω—Å)
    95: 30,   # 85-94: 30 –∫—Ä—ã—à–µ–∫ (10% —à–∞–Ω—Å)
    100: 50   # 95-99: 50 –∫—Ä—ã—à–µ–∫ (5% —à–∞–Ω—Å)
}


def get_random_prize() -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—ã—à–µ–∫ –≤ –Ω–∞–≥—Ä–∞–¥—É
    """
    random_number = randint(0, 99)
    for threshold, prize in PRIZES.items():
        if random_number < threshold:
            return prize
    return 5

router = Router()


@router.message(Command('day'), F.chat.type != ChatType.PRIVATE)
async def cmd_day(message: Message, bot: Bot) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°‚úå",
        url=settings.LINK_BOT
    ))
    text = mk.text(mk.hbold('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏'), "–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å –±–æ—Ç–∞üç∫")
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
    return


@router.message(Command('day'))
async def cmd_day(message: Message, bot: Bot) -> None:
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ NEWS
    check_subscribe = await bot.get_chat_member(settings.ID_NEWS, tg_id)
    if check_subscribe.status == ChatMemberStatus.LEFT or check_subscribe.status == ChatMemberStatus.KICKED:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ üì∞",
            url=settings.LINK_NEWS
        ))
        text = mk.text(mk.hbold('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª üî•'))
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ CHAT
    check_subscribe = await bot.get_chat_member(settings.ID_CHAT, tg_id)
    if check_subscribe.status == ChatMemberStatus.LEFT or check_subscribe.status == ChatMemberStatus.KICKED:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É üí¨",
            url=settings.LINK_CHAT
        ))
        text = mk.text(mk.hbold('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ'))
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return
    
    name = message.from_user.first_name or "unknown"
    link = message.from_user.username or "unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    ban = await check_ban(tg_id, name, link, '/day')
    if ban:
        expiration_time = ban.expiration
        text = mk.text(
            mk.hbold('‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–∑–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'),
            mk.text('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:', mk.hbold(expiration_time.strftime("%d.%m.%Y %H:%M"))),
            mk.text(f'–°—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ {settings.ADMIN_USERNAME} –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏'),
            sep='\n'
        )
        await message.answer(text, parse_mode='HTML')
        return

    builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text="üéÅ", callback_data=CallbackBox(text='box').pack()) for _ in range(9)]
    builder.row(*buttons, width=3)
    text = mk.hbold('–í—ã–±–∏—Ä–∞–π –∫–æ—Ä–æ–±–∫—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –±–æ–Ω—É—Å üç∫')
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
    return


@router.callback_query(CallbackBox.filter(F.text == 'box'))
async def process_button(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    name = callback.from_user.first_name or "unknown"
    link = callback.from_user.username or "unknown"
    try:
        result = get_random_prize()  

        data_box, status = await box(tg_id, name, link, result)
        if not status:
            text = mk.text(
                mk.hbold(f"üéÅ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω!"),
                mk.text(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ—Ä–æ–±–∫—É {data_box.created.strftime('%d.%m')} –≤ {data_box.created.strftime('%H:%M')}"),
                mk.text('–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ üïô'),
                mk.text(f'<span class="tg-spoiler">–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–ª–µ—á—å—Å—è –≤ –Ω–∞—à–µ–π –º–∏–Ω–∏-–∏–≥—Ä–µ /game üéÆ</span>'), 
                sep='\n'
            )
            await callback.message.edit_text(text, parse_mode="HTML")
            return

        text = mk.text(
            mk.text('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–∞!'),
            mk.hbold(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {result} –∫—Ä—ã—à–µ–∫ ü™ô")
        )
        await callback.message.edit_text(text, parse_mode="HTML")
    except:
        current_time = datetime.now().strftime('%H:%M %d.%m')
        text = mk.text(
            mk.hbold('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞'),
            mk.text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {settings.ADMIN_USERNAME}'),
            mk.text(f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: give_box {tg_id} - {current_time}'),
            sep='\n'
        )
        await callback.message.edit_text(text, parse_mode="HTML")


