from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, InlineKeyboardButton
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder

import bot.db_async
from bot.other.replies import LINK_BOT, ID_CHAT, ID_NEWS, LINK_NEWS, LINK_CHAT
import aiogram.utils.markdown as mk
from bot.db_async import check_ban
import random

#–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def get_random_prize() -> int:
    random_number = random.randint(0, 99)
    if random_number < 40: return 5
    elif random_number < 65: return 10
    elif random_number < 85: return 20
    elif random_number < 95: return 30
    else: return 50


class CallbackBox(CallbackData, prefix='box_day'):
    text: str


router = Router()


@router.message(Command('day'))
async def cmd_day(message: Message, bot: Bot) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type != ChatType.PRIVATE:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —á–∞—Ç
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°‚úå",
            url=LINK_BOT
        ))
        text = mk.text(mk.hbold('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏'), "–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å –±–æ—Ç–∞üç∫")
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ NEWS
    check_subscribe = await bot.get_chat_member(ID_NEWS, tg_id)
    if check_subscribe.status == ChatMemberStatus.LEFT or check_subscribe.status == ChatMemberStatus.KICKED:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ù–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ªüç∫",
            url=LINK_NEWS
        ))
        text = mk.text(mk.hbold('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ªüòî'))
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ CHAT
    check_subscribe = await bot.get_chat_member(ID_CHAT, tg_id)
    if check_subscribe.status == ChatMemberStatus.LEFT or check_subscribe.status == ChatMemberStatus.KICKED:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ù–∞—à –æ–±—â–∏–π —á–∞—Çüç∫",
            url=LINK_CHAT
        ))
        text = mk.text(mk.hbold('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—â–∏–π —á–∞—Çüòî'))
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return
    name = message.from_user.first_name or "unknown"
    link = message.from_user.username or "unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    ban = await check_ban(tg_id, name, link, '/day')
    if ban:
        expiration_time = ban.expiration
        text = mk.text(
            mk.hbold('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤!'),
            mk.text('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ:', mk.hbold(expiration_time.strftime("%d.%m.%Y %H:%M"))),
            mk.text('–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ, —Å–æ–æ–±—â–∏—Ç–µ @plymdvev'),
            sep='\n'
        )
        await message.answer(text, parse_mode='HTML')
        return

    builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text="üéÅ", callback_data=CallbackBox(text='box').pack()) for _ in range(9)]
    builder.row(*buttons, width=3)
    text = mk.hbold('–í—ã–±–∏—Ä–∞–π –∫–æ—Ä–æ–±–∫—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –±–æ–Ω—É—Å üç∫')
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
    return


@router.callback_query(CallbackBox.filter(F.text == 'box'))
async def process_button(callback: types.CallbackQuery):
    try:
        tg_id = callback.from_user.id
        name = callback.from_user.first_name or "unknown"
        link = callback.from_user.username or "unknown"
        result = get_random_prize()  # –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        user, status = await bot.db_async.box(tg_id, name, link, result)
        if not status:
            text = mk.text(
                mk.hbold(f"–¢—ã —É–∂–µ –∑–∞–±—Ä–∞–ª(–∞) —Å–≤–æ–π –ø—Ä–∏–∑ {user.created.strftime('%d.%m.%y')} –≤ {user.created.strftime('%H:%M')}‚úåÔ∏è"),
                mk.text('–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!'),
                mk.text(f'<span class="tg-spoiler">–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ /game </span>'), sep='\n'
            )
            await callback.message.edit_text(text, parse_mode="HTML")
            return
        text = mk.text(
            mk.text('–í–∞–º –≤—ã–ø–∞–ª–æ:'),
            mk.hbold(result, '–∫—Ä—ã—à–µ–∫.')
        )
        await callback.message.edit_text(text, parse_mode="HTML")
    except:
        text = mk.text(
            mk.hbold('–û—à–∏–±–∫–∞!'),
            mk.text('–°–æ–æ–±—â–∏—Ç–µ @plymvdev, —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è: –¢–£–¢ –ë–£–î–ï–¢ –°–°–´–õ–ö–ê'),
            sep='\n'
        )
        await callback.message.edit_text(text, parse_mode="HTML")


