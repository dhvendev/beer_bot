from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import Message
import aiogram.utils.markdown as mk
import json
from main import config_path


router = Router()


#–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–Ω—è
@router.message(Command('factor'))
async def cmd_factor(message: Message):
    with open(config_path) as f:
        config = json.load(f)
    await message.answer(mk.text(config["FACTOR_DAY"], 'üòÇ'))
    return


#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–Ω—è
@router.message(Command('factor_edit'))
async def cmd_factor(message: Message):
    factor = message.text.split(' ')
    if len(factor) == 1:
        await message.answer(mk.text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è \"–ö–û–≠–§–ò–¶–ï–ù–¢–ê –î–ù–Ø\"', '–ü—Ä–∏–º–µ—Ä: ', mk.hcode('/factor_edit 50')), parse_mode='HTML')
        return
    factor = factor[-1]
    try:
        with open(config_path) as f:
            config = json.load(f)
        old_factor = config["FACTOR_DAY"]
        config["FACTOR_DAY"] = factor
        with open(config_path, 'w') as f:
            json.dump(config, f)
        await message.answer(mk.text(f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω —Å {old_factor} –Ω–∞ {factor}'), parse_mode='HTML')
        return
    except ValueError:
        await message.answer(
            mk.text('–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!', '–ü—Ä–∏–º–µ—Ä: ', mk.hcode('/factor_edit 50')), parse_mode='HTML')
        return


