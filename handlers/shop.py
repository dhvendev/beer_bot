from aiogram import Router, types, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ChatType, DiceEmoji
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.other.replies import LINK_BOT, BEER_UNIT
import aiogram.utils.markdown as mk
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot.db_async import User
from sqlalchemy.ext.asyncio import AsyncSession



router = Router()


class AddChance(StatesGroup):
    count = State()


class CallbackChance(CallbackData, prefix='chance'):
    text: str


@router.message(Command('shop'), F.chat.type != ChatType.PRIVATE)
async def cmd_shop(message: Message) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°‚úå",
        url=LINK_BOT
    ))
    text = mk.text(mk.hbold('–ú–∞–≥–∞–∑–∏–Ω'), "–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª—Å –±–æ—Ç–∞üç∫")
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
    return


@router.message(Command('shop'), F.chat.type == ChatType.PRIVATE)
async def cmd_shop(message: Message) -> None:
    text = mk.text('–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ', mk.hbold('Beer Bot!'), '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏—à—å:')
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ üì∂', callback_data=CallbackChance(text='add_chance').pack()))
    await message.answer(text, parse_mode='HTML', reply_markup=builder.as_markup())
    return


@router.callback_query(CallbackChance.filter(F.text == 'add_chance'))
async def call_add_chance(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    text = mk.hbold('–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ —à–∞–Ω—Å–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.\n\n') + mk.hbold('–¶–µ–Ω–∞ –ø–æ –∫—É—Ä—Å—É:') + mk.text(' 1% —à–∞–Ω—Å–∞ = 25 –∫—Ä—ã—à–µ–∫') + mk.hbold('\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!')
    await callback.message.answer(text, parse_mode='HTML')
    await state.set_state(AddChance.count)


@router.message(AddChance.count)
async def chance(message: Message, state: FSMContext, session: AsyncSession, user: User):
    count = message.text
    await state.clear()
    try:
        count = int(count)
        money = 25 * count
        if user.money < money:
            text = mk.hbold('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–Ω—ã—Ö –∫—Ä—ã—à–µ–∫!') + f"\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: " + mk.hbold(str(user.money), "–∫—Ä—ã—à–µ–∫." + '\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /shop')
            await message.answer(text, parse_mode='HTML')
            return
        user.money -= money
        user.chance += count
        await session.commit()
        text = mk.hbold('–£—Å–ø–µ—à–Ω–æ!') + f'\n–í–∞—à —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å {user.chance - count} –Ω–∞ {user.chance}' + f"\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: " + mk.hbold(str(user.money), "–∫—Ä—ã—à–µ–∫.")
        await message.answer(text, parse_mode='HTML')
        return
    except ValueError:
        await session.rollback()
        await message.answer(mk.text('–í–≤–æ–¥–∏—Ç—å —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!', '\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /shop'), parse_mode='HTML')


