from aiogram import Router, types, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ChatType, DiceEmoji
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.other.replies import LINK_BOT, BEER_UNIT
import aiogram.utils.markdown as mk
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendDice
from math import ceil
from bot.db_async import game
import json
from .admin import config_path



router = Router()


class Game(StatesGroup):
    id_game = State()
    start = State()
    count = State()
    values = State()
    game = State()

class CallbackGame(CallbackData, prefix='game'):
    text: str


@router.message(Command('clear'))
async def clear(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    await message.answer('–í—Å–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')


@router.message(Command('game'))
async def cmd_game(message: Message, state: FSMContext) -> None:
    if message.chat.type != ChatType.PRIVATE:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —á–∞—Ç
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°‚úå",
            url=LINK_BOT
        ))
        text = mk.text(mk.hbold('–ú–∏–Ω–∏ –∏–≥—Ä–∞'), "–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å –±–æ—Ç–∞üç∫")
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        return
    current_state = await state.get_state()
    if current_state:
        await message.answer(mk.text(mk.hbold("–û—à–∏–±–∫–∞!"),
                                     mk.hbold("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"),
                                     "- —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞;",
                                     "- –≤—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É;",
                                     "- –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –∂—É–ª—å–Ω–∏—á–∞–µ—Ç–µ",
                                     mk.hbold("–†–µ—à–µ–Ω–∏–µ: /clear"), sep='\n'
                                     ), parse_mode='HTML')
        return
    await state.set_state(Game.start)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='–î–∞‚úÖ', callback_data=CallbackGame(text='yes').pack()))
    builder.add(InlineKeyboardButton(text='–ù–µ—Ç‚ùå', callback_data=CallbackGame(text='no').pack()))
    await message.answer(mk.text(
        mk.hbold('–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã - 10 –∫—Ä—ã—à–µ–∫ —Å –±–∞–ª–∞–Ω—Å–∞.\n'),
        mk.hbold('–í–∞–∂–Ω–æ:'),
        mk.text('–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã, —É –≤–∞—Å –±—É–¥–µ—Ç 5 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'),
        mk.text('–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª–µ–Ω —á–∞—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫—Ä—ã—à–µ–∫'),
        mk.hbold('\n–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?'), sep='\n'),
        reply_markup=builder.as_markup(), parse_mode='HTML')


@router.message(StateFilter(Game))
async def cancel_handler(message: Message, state: FSMContext) -> None:
    await message.delete()
    current_state = await state.get_state()
    if current_state is None:
        return
    print("Cancelled.")
    await state.clear()
    await message.answer("Cancelled.")


@router.callback_query(CallbackGame.filter(F.text == 'no'))
async def call_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    current_state = await state.get_state()
    if current_state is None:
        return
    print("Cancelled.")
    await state.clear()


@router.callback_query(CallbackGame.filter(F.text == 'yes'))
async def call_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    tg_id = callback.from_user.id
    name = callback.from_user.first_name or "unknown"
    link = callback.from_user.username or "unknown"
    user, status, id_game = await game(tg_id, name, link, -10)
    if not status:
        await callback.message.answer(
            mk.text("–£–ø—Å, –≤–∞—à–∏—Ö –∫—Ä—ã—à–µ–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ãüòî\n", "–ö—Ä—ã—à–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:", mk.hbold(user.money)),
            parse_mode='HTML')
        return
    print('id –∑–∞–ø–∏—Å–∏ –∏–≥—Ä—ã: ', id_game)
    await state.update_data(count=5, id_game=id_game)
    await state.set_state(Game.game)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å', callback_data=CallbackGame(text='play').pack()))
    await callback.message.answer(mk.text(
        mk.hbold('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!'),
        '–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å',
        '–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫'),
        reply_markup=builder.as_markup(), parse_mode='HTML'
    )


@router.callback_query(CallbackGame.filter(F.text == 'play'))
async def call_play(callback: CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state is None:
        await callback.message.delete()
        return
    data = await state.get_data()
    count = data.get('count')
    values = data.get('values', {})
    new_count = count-1
    if new_count < 0:
        id_game = data.get('id_game')
        await state.clear()
        collect = await callback.message.edit_text('–ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..')
        result, text = await check_result(values)
        await collect.edit_text(text, parse_mode='HTML')
        tg_id = callback.from_user.id
        name = callback.from_user.first_name or "unknown"
        link = callback.from_user.username or "unknown"
        await game(tg_id, name, link, result, True, id_game)
        return
    builder = InlineKeyboardBuilder()
    TEXT_BUTTON = f'–ò–≥—Ä–∞—Ç—å'
    TEXT_MSG = f'–î–∞–≤–∞–π –µ—â–µ, —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {new_count} –ø–æ–ø—ã—Ç–æ–∫‚úåÔ∏è'
    if new_count == 0:
        TEXT_BUTTON = f'–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—àüéÅ'
        TEXT_MSG = '–ö–ª–∏–∫–∞–π –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à‚úåÔ∏è'
    builder.add(InlineKeyboardButton(text=TEXT_BUTTON, callback_data=CallbackGame(text='play').pack()))
    await state.update_data(count=count - 1, values=values)
    try:
        await callback.message.delete()
        slot_message = await bot.send_dice(callback.message.chat.id, emoji=DiceEmoji.SLOT_MACHINE)
        values[count] = slot_message.dice.value
        await bot.send_message(callback.message.chat.id, TEXT_MSG, reply_markup=builder.as_markup())
    except:
        await bot.send_message(callback.message.chat.id, mk.text(
            mk.hbold('–ó–∞–º–µ—á–µ–Ω–æ –∂—É–ª—å–Ω–∏—á–µ—Å—Ç–≤–æ!'),
            mk.text('–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–≥—Ä–∞—Ç—å, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. ')
        ), parse_mode='HTML')


async def check_result(results: dict):
    result = 0
    text = mk.hbold('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:')
    for key, value in enumerate(results.values()):
        if value in [5, 9, 13]:
            mid_result = 2
            COMB = "üç´‚ùåüç´"
        elif value in [18, 26, 30]:
            mid_result = 3
            COMB = "üçá‚ùåüçá"
        elif value in [35, 39, 47]:
            mid_result = 4
            COMB = "üçã‚ùåüçã"
        elif value in [52, 56, 60]:
            mid_result = 5
            COMB = "7Ô∏è‚É£‚ùå7Ô∏è‚É£"
        elif value == 1:
            mid_result = 8
            COMB = "üç´üç´üç´"
        elif value == 22:
            mid_result = 12
            COMB = "üçáüçáüçá"
        elif value == 43:
            mid_result = 15
            COMB = "üçãüçãüçã"
        elif value == 64:
            mid_result = 20
            COMB = "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
        else:
            mid_result = 0
            COMB = "‚ùå‚ùå‚ùå"
        result += mid_result
        text += f"\n{key+1}. +{mid_result} - {COMB}"
    with open(config_path) as f:
        config = json.load(f)
    factor = int(config["FACTOR_DAY"])
    result *= (1 + (factor / 100))
    result = ceil(result)
    text += mk.hbold('\n\n–ò—Ç–æ–≥–æ:') + mk.text('\n–° —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–Ω—è: + ') + mk.hbold(f'{factor}%') + mk.text('\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: ') + mk.hbold(result)
    return result, text

